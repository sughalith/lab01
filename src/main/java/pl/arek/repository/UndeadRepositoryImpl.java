package pl.arek.repository;

import pl.arek.domain.Undead;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;

public class UndeadRepositoryImpl implements UndeadRepository{

    private Connection connection;
    private PreparedStatement addUndeadStmt;
    private PreparedStatement getAllStmt;


    public UndeadRepositoryImpl(Connection connection) throws SQLException{
        this.connection = connection;
        if (!isDatabaseReady()) {
            createTables();
        }
        setConnection(connection);
    }

    public void createTables() throws SQLException {
        connection.createStatement().executeUpdate(
                "CREATE TABLE "
                        + "Undead(id int GENERATED BY DEFAULT AS IDENTITY, " +
                        "name varchar(20) NOT NULL)");
    }

    public boolean isDatabaseReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Undead".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    @Override
    public List<Undead> getAll() {
        List<Undead> undeads = new LinkedList<>();
        try {
            ResultSet rs = getAllStmt.executeQuery();

            while (rs.next()) {
                Undead u = new Undead();
                u.setId(rs.getInt("id"));
                u.setType(rs.getString("name"));
                undeads.add(u);
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return undeads;
    }

    @Override
    public void initDatabase() {

    }

    @Override
    public Undead getById(int id) {
        return null;
    }

    @Override
    public void addUndead(Undead undead) {
        //int count = 0;
        try{
            addUndeadStmt.setString(1, undead.getType());
            //count = addUndeadStmt.executeUpdate();
            addUndeadStmt.executeUpdate();
        }
        catch (SQLException e){
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
    }

    @Override
    public void deleteUndead(Undead undead) {

    }

    @Override
    public void updateUndead(int oldId, Undead newUndead) {

    }

    public Connection getConnection() {
        return connection;
    }

    /**
     * @param connection the connection to set
     */
    public void setConnection(Connection connection) throws SQLException{
        this.connection = connection;
        addUndeadStmt = connection.prepareStatement("INSERT INTO Undead (name) VALUES (?)");
        getAllStmt = connection.prepareStatement("SELECT * FROM Undead");
    }
}
